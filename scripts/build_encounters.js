const each = require('async/each');
const fs = require('fs');
const Tabletop = require('./tabletop.js');

// Documents to load and their content set name
const docs = {
  '11Y8eS_cyIQ7wlGj5mo7VEHf355ycEHePrdysPzTnVJw': 'base',
  '1K08sXHXyW7TAMXJnHOv9V3QtjxwjAf2-cvbaO-S2fDQ': 'horror',
  '1LD4SP5YMFs49yn1sdgIrRnMGB3tz2jvGuCt2aKcCsyM': 'future',
};

let encounters = {};

// Result directory to store the generated files.
const dest = process.argv[3] || "./services/app/src/Encounters.tsx";

function parseEncounters(rows, contentSet) {
  console.log(`=== Parsing encounters for ${contentSet} ===`);
  rows.forEach((row) => {
    if (row.Comment) {
      return;
    }
    console.log(row.name);
    encounters[row.name.toLowerCase()] = {
      class: row.class,
      name: row.name,
      set: contentSet,
      tier: parseInt(row.tier),
    };
  });
}

function output(err) {
  if (err) {
    throw err;
  }
  encounters = JSON.stringify(encounters, null, 2);
  encounters = encounters.replace(/'/g, '\\\'').replace(/"/g, "'");
  // tslint:disable-next-line
  fs.writeFile(dest, `//GENERATED BY ./scripts/build_encounters.js\n/* tslint:disable:object-literal-sort-keys */\nexport const ENCOUNTERS: any = ${encounters};\n`,
    (err) => {
      if (err) {
        console.log(err);
      } else {
        console.log("Saved to " + dest);
      }
  });
}

function main() {
  each(Object.keys(docs), (docID, callback) => {
    Tabletop.init({ // jshint ignore:line
      callback: (rows) => {
        parseEncounters(rows, docs[docID]);
        callback();
      },
      key: docID,
      simpleSheet: true,
      wanted: ["Encounter"],
    });
  }, output);
}

main();
